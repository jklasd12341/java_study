# 제어 명령

	1. 조건 제어 명령  조건문
	2. 반복 제어 명령  반복문	
	
	1. 조건 제어 명령
		==> 특정 조건에 따라서 실행 순서를 변경하는 명령
		
		형식 1]
			
			if(조건식) {
				실행문
			}                              //  조건식이 참인 경우에 실행문을 실행
			
		형식 2]
			
			if(조건식) {
				실행문1
			} else {
				실행문2
			}             					// 조건식이 참이면 실행문1을 거짓이면 실행문 2를 실행.
			
		형식 3]
		
			if(조건식) {
				실행문1
			} else if(조건식2){
				실행문2
			} else if(조건식3){
				실행문3
			}...
			
			} else {
				실행문
			}
			
		형식 4]
		
			switch(비교내용) {
			case 데이터1:
				실행문1
				break; // 반드시 기술!!!!
			case 데이터2:
				실행문2
				break;
			.....
			
			defaul:    // 위의 데이터 및 실행문에 해당하지 않을 경우
				실행문
			}
			
형식 1] - Test05
	
	1
	if(조건식 - 2) {	 
		실행문 - 3
	}
	3
	
	실행순서
	조건식이 true  인 경우 : 1 - 2 - 3 - 4
	조건식이 false 인 경우 : 1 - 2 - 4
	
참고 ]
	자바의 명령을 보면 {} 이 존재하는 경우가 있다.
	이것을 우리는 블럭 마크(영역)라고 표현한다.
	이 의미는 실행 범위를 지정하는 것이다.
	}는 ;(토큰)을 대신할 수 있다.

참고 ]
	{} 블럭 안의 실행 내용이 오직 한 문장이면
	{} 기호를 생략해도 된다. 
	하지만 사용하는 것을 원칙으로 한다.
	
형식 2] - Test06
	
	1
	if(조건식 - 2) {
		실행문1 - 3
	} else {
		실행문2 - 4
	}
	5
	
	실행순서
	조건식이 true  인 경우 : 1 - 2 - 3 - 5
	조건식이 false 인 경우 : 1 - 2 - 4 - 5
	
형식 3]	

	1
	if(조건식1 - 2) {
		실행문1 - 3
	} else if(조건식2 - 4) {
		실행문2 - 5
	} else if(조건식3 - 6) {
		실행문3 - 7
	} else {
		실행문4 - 8
	}
	9
		
	실행문서
	조건식 1이 참인경우 : 1 - 2 - 3 - 9
	조건식 2가 참인경우 : 1 - 2 - 4 - 5 - 9
	조건식이 모두 false인 경우 : 1 - 2 - 4 - 6 - 8 - 9
	
참고 ]

	if 명령도 중첩이 가능하다. 
	
	예 ] 
		
		if(조건문1) {
			if(조건문2) {
			 	실행문1
			 } else {
			 	실행문2
			 }
			 실행문3
		} else {
			if(조건문3) {
			 	실행문4
			 } else {
			 	실행문5
			 }
			 실행문6
		} 
			 